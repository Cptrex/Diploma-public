//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientService.IBlockchainService")]
    public interface IBlockchainService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlockchainService/Connect", ReplyAction="http://tempuri.org/IBlockchainService/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlockchainService/Disconnect", ReplyAction="http://tempuri.org/IBlockchainService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlockchainService/ValidateBlock", ReplyAction="http://tempuri.org/IBlockchainService/ValidateBlockResponse")]
        System.Threading.Tasks.Task ValidateBlockAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBlockchainService/AddBlockToChain", ReplyAction="http://tempuri.org/IBlockchainService/AddBlockToChainResponse")]
        System.Threading.Tasks.Task AddBlockToChainAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IBlockchainServiceChannel : ClientService.IBlockchainService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class BlockchainServiceClient : System.ServiceModel.ClientBase<ClientService.IBlockchainService>, ClientService.IBlockchainService
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BlockchainServiceClient() : 
                base(BlockchainServiceClient.GetDefaultBinding(), BlockchainServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IBlockchainService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BlockchainServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(BlockchainServiceClient.GetBindingForEndpoint(endpointConfiguration), BlockchainServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BlockchainServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BlockchainServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BlockchainServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BlockchainServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BlockchainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string login)
        {
            return base.Channel.ConnectAsync(login);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id)
        {
            return base.Channel.DisconnectAsync(id);
        }
        
        public System.Threading.Tasks.Task ValidateBlockAsync()
        {
            return base.Channel.ValidateBlockAsync();
        }
        
        public System.Threading.Tasks.Task AddBlockToChainAsync()
        {
            return base.Channel.AddBlockToChainAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IBlockchainService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IBlockchainService))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8732/");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BlockchainServiceClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IBlockchainService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BlockchainServiceClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IBlockchainService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IBlockchainService,
        }
    }
}
